# Thanks to Paul McJones for porting the code to Algol 68 #

BEGIN

    PROC unguardedlinearinsert = (REF [] LONG INT a, INT l, LONG INT val) VOID:
    BEGIN
        INT prev;
        INT last := l;
        prev := last - 1;
        WHILE val < a[prev] DO
                a[last] := a[prev];
                last := prev;
                prev := prev - 1
        OD;
        a[last] := val
    END;

    PROC unguardedinsertionsort = (REF [] LONG INT a, INT f, INT l) VOID:
    BEGIN
        INT i;
        FOR i FROM f TO l - 1 DO
            unguardedlinearinsert(a, i, a[i])
        OD
    END;

    PROC linearinsert = (REF [] LONG INT a, INT f, INT l, LONG INT val) VOID:
    BEGIN
        INT last := l;
        IF val < a[f] THEN
            WHILE f /= last DO
                a[last] := a[last - 1];
                last := last - 1
            OD;
            a[f] := val
        ELSE unguardedlinearinsert(a, last, val)
    FI
    END;
  
    PROC insertionsort = (REF [] LONG INT a, INT f, INT l) VOID:
    BEGIN
        INT i;
        IF f /= l THEN
            FOR i FROM f + 1 TO l - 1 DO
                linearinsert(a, f, i, a[i])
        OD
    FI
    END;
   
    PROC medianof3 = (LONG INT a, LONG INT b, LONG INT c) LONG INT:
        IF a < b THEN
                IF b < c THEN b
                ELIF a < c THEN c
                ELSE a
                FI
        ELIF a < c THEN a
        ELIF b < c THEN c
        ELSE b
        FI;

    COMMENT PROC exchange = (REF INT a, REF INT b) VOID: BEGIN INT t; t := a; a := b; b := t END COMMENT
  
    PROC unguardedpartition = (REF [] LONG INT a, INT f, INT l, LONG INT pivot) INT:
    (
        LONG INT tmp;
        INT first := f;
        INT last := l - 1;
        WHILE a[first] < pivot DO first := first + 1 OD;
        WHILE pivot < a[last] DO last := last - 1 OD;
        WHILE first < last DO
                COMMENT exchange(a[first], a[last]) COMMENT
                tmp := a[first];
                a[first] := a[last];
                a[last] := tmp;
                first := first + 1; last := last - 1;
                WHILE a[first] < pivot DO first := first + 1 OD;
                WHILE pivot < a[last] DO last := last - 1 OD
        OD;
        first
    );

    PROC quicksortloop = (REF [] LONG INT a, INT f, INT l, INT threshold) VOID:
    BEGIN
        INT len;
        INT middle;
        LONG INT pivot;
        INT cut;
        INT first := f;
        INT last := l;
        len := last - first;
        WHILE len > threshold DO
            middle := first + (last - first) OVER 2;
            pivot := medianof3(a[first], a[middle], a[last - 1]);
            cut := unguardedpartition(a, first, last, pivot);
            IF last - cut < cut - first THEN
                quicksortloop(a, cut, last, threshold);
                last := cut
            ELSE
                quicksortloop(a, first, cut, threshold);
                first := cut
            FI;
            len := last - first
        OD
    END;

    PROC quicksort = (REF [] LONG INT a, INT first, INT last) VOID:
    BEGIN
        INT len;
        INT threshold;
        INT middle;
        len := last - first;
        threshold := 16;
        IF len <= threshold THEN
            insertionsort(a, first, last)
        ELSE
            quicksortloop(a, first, last, threshold);
            middle := first + threshold;
            insertionsort(a, first, middle);
            unguardedinsertionsort(a, middle, last)
        FI
    END;

    PROC rand = REAL: random;

    PROC randomint = (INT m, INT n) INT:
    (m + ENTIER(rand * (n - m + 1)));

    PROC randomshuffle = (REF [] LONG INT a, INT f, INT l) VOID:
    BEGIN
        INT i;
        INT randomplace;
        LONG INT tmp;
        i := f + 1;
        WHILE i < l DO
            randomplace := randomint(0, i - f + 1);
            COMMENT exchange(a[randomplace], a[i]) COMMENT
            tmp := a[randomplace];
            a[randomplace] := a[i];
            a[i] := tmp;
            i := i + 1
        OD
    END;
   
    PROC iota = (REF [] LONG INT a, INT n) VOID:
    BEGIN
        INT i;
        FOR i FROM 0 TO n - 1 DO a[i] := i OD
    END;

    PROC arraycopy = (REF [] LONG INT source, INT sourcefirst, REF [] LONG INT dest, INT destfirst, INT size) VOID:
    BEGIN
        INT i;
        FOR i FROM 0 TO size - 1 DO
            dest[destfirst + i] := source[sourcefirst + i]
        OD
    END;

    PROC sortedarray = (REF [] LONG INT a, INT size) BOOL:
    (
        INT i;
        IF size < 2 THEN TRUE
        ELSE
            i := 0;
            WHILE i < size - 2 & a[i] < a[i + 1] DO i := i + 1 OD;
            i = size - 2
        FI
    );

    PROC timesort = (REF [] LONG INT data, INT length, REF [] LONG INT buffer, INT size) REAL:
    (
        INT first;
        REAL starttime, stoptime;
        first := 0;
        starttime := clock;
        WHILE first <= length - size DO
            arraycopy(data, first, buffer, 0, size);
            quicksort(buffer, 0, size);
            stoptime := clock;
            IF NOT sortedarray(buffer, size) THEN
                INT i;
                print("out of order: ");
                FOR i FROM 0 TO size - 1 DO print(buffer[i]) OD;
                abort COMMENT panic COMMENT
            FI;
            first := first + size
        OD;
        stoptime - starttime
    );

    INT minsize;
    INT maxsize;
    minsize := 8;
    maxsize := COMMENT 16 * COMMENT 256 * 1024;#
    BEGIN
        [0 : maxsize - 1] LONG INT data;
        [0 : maxsize - 1] LONG INT buffer;
        INT arraysize;
        REAL time;
        
        print ("size     time"); print(newline);

        iota(data, maxsize);
        randomshuffle(data, 0, maxsize);

        arraysize := minsize;
        WHILE arraysize <= maxsize DO
            time := timesort(data, maxsize, buffer, arraysize);
            print(arraysize); print("    "); print(time * 1000000000.0 / maxsize); print(newline);
            arraysize := 2 * arraysize
        OD
    END
END
